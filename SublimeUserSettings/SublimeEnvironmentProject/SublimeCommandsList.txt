class Application Commands:
	edit_settings(base_file, user_file=None, default=None)
	bh_debug(set_value=None)
	bh_toggle_enable()
	bh_toggle_high_visibility()
	bracket_highlighter_open_site(url)
	bracket_highlighter_support_info()
	sbs_compare_files(A=None, B=None)
	discordrp_connect()
	discordrp_disconnect()
	discordrp_reconnect()

class Window Commands:
	convert_color_scheme(use_variables=None)
	convert_syntax()
	exec(cmd=None, shell_cmd=None, show_panel=None, file_regex='', line_regex='', working_dir='', encoding='utf-8', env={}, quiet=False, kill=False, update_phantoms_only=False, hide_phantoms_only=False, word_wrap=True, syntax='Packages/Text/Plain text.tmLanguage', **kwargs)
	prompt_goto_line()
	new_build_system()
	new_plugin()
	new_snippet()
	new_syntax()
	close_pane(group=-1)
	focus_neighboring_group(forward=True)
	move_to_neighboring_group(forward=True)
	new_pane(move=True)
	set_max_columns(columns)
	profile_plugins()
	quick_panel(items)
	rename_file(new_name)
	profile_syntax_definition(**kwargs)
	run_syntax_tests(find_all=False, **kwargs)
	syntax_definition_compatibility(**kwargs)
	edit_syntax_settings()
	open_file_settings()
	delete_file(files)
	delete_folder(dirs)
	find_in_folder(dirs)
	new_file_at(dirs)
	new_folder(dirs)
	open_containing_folder(files)
	rename_path(paths)
	switch_file(extensions=[])
	goto_definition(symbol=None)
	goto_reference(symbol=None)
	select_color_scheme()
	select_theme()
	view_resource(name)
	diff_files(files)
	run_shell_script(**kwargs)
	bh_debug_rule(filter_key=False)
	bracket_highlighter_changes()
	bracket_highlighter_doc(page)
	chain(commands)
	test_default_channel(include_repositories=False)
	test_remote_repository()
	find_all_key_conflicts()
	find_key_conflicts(output='quick_panel')
	find_key_conflicts_command_search()
	find_key_conflicts_with_package(multiple=False)
	find_key_mappings(output='quick_panel')
	find_overlap_conflicts()
	lsp_apply_workspace_edit(changes:LSP.plugin.core.typing.Optional[Dict[<class 'str'>, List[Tuple[Tuple[<class 'int'>, <class 'int'>], Tuple[<class 'int'>, <class 'int'>], <class 'str'>, Optional[<class 'int'>]]]]]=None) -> None
	lsp_clear_diagnostics() -> None
	lsp_disable_language_server_globally() -> None
	lsp_disable_language_server_in_project() -> None
	lsp_enable_language_server_globally() -> None
	lsp_enable_language_server_in_project() -> None
	lsp_hide_diagnostic() -> None
	lsp_next_diagnostic() -> None
	lsp_previous_diagnostic() -> None
	lsp_show_diagnostics_panel() -> None
	lsp_toggle_server_panel() -> None
	carry_file_to_pane(direction, create_new_if_necessary=None)
	clone_file_to_pane(direction, create_new_if_necessary=None)
	create_pane(direction, give_focus=False)
	create_pane_with_cloned_file(direction)
	create_pane_with_file(direction)
	destroy_pane(direction)
	new_window_from_saved_layout()
	new_window_with_current_layout()
	pane()
	pull_file_from_pane(direction)
	remove_layout()
	reorder_pane()
	resize_pane(orientation, mode=None)
	restore_layout()
	save_layout()
	toggle_zoom_pane(fraction=None)
	travel_to_pane(direction, create_new_if_necessary=None)
	unzoom_pane()
	zoom_pane(fraction=None)
	override_audit_create_override(package=None, file=None, include_existing=False)
	override_audit_diff_report(package=None, force_reuse=False, exclude_unchanged=False)
	override_audit_diff_single(package=None, override=None, bulk=False, exclude_unchanged=False)
	override_audit_override_report(force_reuse=False, only_expired=False, ignore_empty=False, exclude_unchanged=False)
	override_audit_package_report(force_reuse=False)
	add_channel()
	add_repository()
	advanced_install_package(packages=None)
	create_package()
	disable_package()
	discover_packages()
	enable_package()
	install_local_dependency()
	install_package()
	list_packages()
	list_unmanaged_packages()
	package_control_disable_debug_mode()
	package_control_edit_settings()
	package_control_enable_debug_mode()
	package_control_open_default_settings()
	package_control_open_user_settings()
	package_control_tests()
	remove_channel()
	remove_package()
	remove_repository()
	satisfy_dependencies()
	upgrade_all_packages()
	upgrade_package()
	packagedev_convert(source_format=None, target_format=None, ext=None, open_new_file=False, rearrange_yaml_syntax_def=False, _output=None, **kwargs)
	packagedev_create_package(name=None)
	packagedev_edit_scheme()
	packagedev_edit_theme()
	packagedev_new_resource(kind, suffix=None)
	packagedev_open_package(name)
	edit_package_file()
	extract_all_packages()
	extract_package()
	package_resource_viewer_base()
	package_resource_viewer()
	view_package_file()
	pane_pane_resize(dimension, resize)
	pane_pane_toggle_setting(setting)
	window_command_settings()
	copy_to_clipboard()
	toggle_scope_always()
	side_bar_copy(paths=[])
	side_bar_copy_content_base64(paths=[])
	side_bar_copy_content_utf8(paths=[])
	side_bar_copy_dir_path(paths=[])
	side_bar_copy_name(paths=[])
	side_bar_copy_name_encoded(paths=[])
	side_bar_copy_path_absolute_from_project(paths=[])
	side_bar_copy_path_absolute_from_project_encoded(paths=[])
	side_bar_copy_path_absolute_from_project_encoded_windows(paths=[])
	side_bar_copy_path(paths=[])
	side_bar_copy_path_encoded(paths=[])
	side_bar_copy_path_quoted(paths=[])
	side_bar_copy_path_relative_from_project(paths=[])
	side_bar_copy_path_relative_from_project_encoded(paths=[])
	side_bar_copy_path_relative_from_view(paths=[])
	side_bar_copy_path_relative_from_view_encoded(paths=[])
	side_bar_copy_path_relative_to_last_selected_view(paths=[])
	side_bar_copy_project_directories(paths=[])
	side_bar_copy_tag_ahref(paths=[])
	side_bar_copy_tag_img(paths=[])
	side_bar_copy_tag_script(paths=[])
	side_bar_copy_tag_style(paths=[])
	side_bar_copy_url(paths=[])
	side_bar_copy_url_decoded(paths=[])
	side_bar_cut(paths=[])
	side_bar_delete(paths=[], confirmed='False')
	side_bar_donate(paths=[])
	side_bar_duplicate(paths=[], new=False)
	side_bar_edit(paths=[])
	side_bar_edit_to_right(paths=[])
	side_bar_empty(paths=[], confirmed='False')
	side_bar_files_open_with(paths=[], application='', extensions='', args=[])
	side_bar_files_open_with_edit_applications(paths=[])
	side_bar_find_files_path_containing(paths=[])
	side_bar_find_in_files_with_extension(paths=[])
	side_bar_find_in_parent(paths=[])
	side_bar_find_in_project(paths=[])
	side_bar_find_in_project_folder(paths=[])
	side_bar_find_in_project_folders()
	side_bar_find_in_selected(paths=[])
	side_bar_folder_close_other_views(paths=[])
	side_bar_folder_close_views(paths=[])
	side_bar_folder_save_views(paths=[])
	side_bar_mass_rename(paths=[])
	side_bar_move(paths=[], new=False)
	side_bar_new_directory2(paths=[], name='')
	side_bar_new_directory(paths=[], name='')
	side_bar_new_file2(paths=[], name='')
	side_bar_new_file(paths=[], name='')
	side_bar_open_browsers(paths=[])
	side_bar_open(paths=[])
	side_bar_open_in_browser(paths=[], type=False, browser='')
	side_bar_open_in_new_window(paths=[])
	side_bar_open_with_finder(paths=[])
	side_bar_paste(paths=[], in_parent='False', test='True', replace='False')
	side_bar_paste_command2(paths=[], in_parent='False', test='True', replace='False', key='')
	side_bar_preview_edit_urls(paths=[])
	side_bar_project_item_add(paths=[])
	side_bar_project_item_exclude(paths=[])
	side_bar_project_item_exclude_from_index(paths=[], type='item')
	side_bar_project_item_remove_folder(paths=[])
	side_bar_project_open_file(paths=[])
	side_bar_rename(paths=[], newLeaf=False)
	side_bar_reveal(paths=[])
	side_bar_save_as_admin()
	aaaaa_side_bar(paths=[])
	zzzzz_side_bar(paths=[])
	delete_file()
	delete_folder()
	find_in_folder()
	new_file_at()
	new_folder()
	open_containing_folder()
	rename_path()
	terminus_cancel_build(*args, **kwargs)
	terminus_close_all()
	terminus_exec(**kwargs)
	terminus_generate_theme(theme=None, remove=False, force=False)
	terminus_open(**kwargs)
	terminus_select_theme(theme=None)
	terminus_send_string(string, tag=None, visible_only=False)
	toggle_terminus_panel(**kwargs)
	anaconda_disable_linting() -> None
	anaconda_enable_linting() -> None
	anaconda_get_lines() -> None
	anaconda_mc_cabe() -> None
	anaconda_next_lint_error() -> None
	anaconda_prev_lint_error() -> None
	anaconda_vagrant_enable() -> None
	send_code_install_xdotool(path=None)
	send_code_build(cmd=None, prog=None)
	delete_assembly_stuff()
	run_cmd(cmd, show_panel=True)
	list_all_commands()
	user_test()

class TextCommands:
	arithmetic(expr)
	auto_indent_tag()
	wrap_block(begin, end)
	toggle_comment(block=False)
	copy_path()
	detect_indentation(show_message=True, threshold=10)
	fold_all()
	fold_by_level(level)
	fold()
	fold_unfold()
	unfold_all()
	unfold()
	goto_line(line)
	jump_back()
	jump_forward()
	expand_tabs(set_translate_tabs=False, whole_buffer=True, **kw)
	tab(set_translate_tabs=False, whole_buffer=True, **kw)
	unexpand_tabs(set_translate_tabs=False, whole_buffer=True, **kw)
	add_to_kill_ring(forward)
	yank()
	delete_to_mark()
	select_to_mark()
	set_mark()
	swap_with_mark()
	open_context_url(event)
	open_in_browser()
	old_expand_selection_to_paragraph()
	old_wrap_lines(width=0)
	paste_from_history()
	scroll_to_bof()
	scroll_to_eof()
	show_at_center()
	show_scope_name()
	permute_lines(operation='shuffle')
	permute_selection(operation='shuffle')
	sort_lines(case_sensitive=False, reverse=False, remove_duplicates=False)
	sort_selection(case_sensitive=False, reverse=False, remove_duplicates=False)
	context_goto_definition(event)
	lower_case()
	rot13()
	swap_case()
	title_case()
	transformer()
	upper_case()
	transpose(**kw)
	diff_changes()
	encode_html_entities(**args)
	csv_delete_col()
	csv_delete_trailing_cols()
	csv_evaluate()
	csv_format()
	csv_format_compact()
	csv_format_expand()
	csv_insert_col()
	csv_select_col()
	csv_set_delimiter()
	csv_set_output(**args)
	csv_sort_by_col_asc()
	csv_sort_by_col_desc()
	alignment()
	bh_async_key(threshold=True, lines=False, adjacent=False, no_outside_adj=False, no_block_mode=False, ignore=None, plugin=None)
	bh_key(threshold=True, lines=False, adjacent=False, no_outside_adj=False, no_block_mode=False, ignore=None, plugin=None)
	bh_offscreen_popup(point=None, no_threshold=False)
	bh_show_string_escape_mode()
	bh_toggle_string_escape_mode()
	bracket_plugin_run()
	bh_remove_brackets()
	bh_debug_rule_edit(text)
	swap_brackets(**kwargs)
	bh_next_wrap_sel()
	execute_wrap_instance()
	wrap_brackets()
	convert_to_back_slash()
	convert_to_camel()
	convert_to_dash()
	convert_to_dot()
	convert_to_pascal()
	convert_to_screaming_snake()
	convert_to_separate_words()
	convert_to_slash()
	convert_to_snake()
	toggle_snake_camel_pascal()
	channel_repository_tools_insert(string='')
	test_local_repository()
	upgrade_repository_schema()
	erase_view()
	insert_view(string='')
	sbs_compare(with_active=False, group=-1, index=-1, compare_selections=False)
	sbs_mark_sel()
	sbs_next_diff(string='')
	sbs_prev_diff(string='')
	sbs_select_text(index='')
	expand_region(language='', undo=False, debug=True)
	file_diff_clipboard(**kwargs)
	file_diff()
	file_diff_dummy1(content)
	file_diff_file(**kwargs)
	file_diff_menu(cmd=None)
	file_diff_previous(**kwargs)
	file_diff_saved(**kwargs)
	file_diff_selections(**kwargs)
	file_diff_tab(**kwargs)
	insert_content(content)
	increment_selection()
	lsp_apply_document_edit(edit:LSP.plugin.core.typing.Any, changes:LSP.plugin.core.typing.Optional[List[Tuple[Tuple[<class 'int'>, <class 'int'>], Tuple[<class 'int'>, <class 'int'>], <class 'str'>, Optional[<class 'int'>]]]]=None) -> None
	lsp_clear_panel(edit:sublime.Edit) -> None
	lsp_code_actions(edit:sublime.Edit) -> None
	lsp_document_symbols(edit:sublime.Edit) -> None
	lsp_execute(edit:sublime.Edit, command_name:LSP.plugin.core.typing.Optional[<class 'str'>]=None, command_args:LSP.plugin.core.typing.Optional[List[Any]]=None) -> None
	lsp_format_document(edit:sublime.Edit) -> None
	lsp_format_document_range(edit:sublime.Edit) -> None
	lsp_hover(edit:sublime.Edit, point:LSP.plugin.core.typing.Optional[<class 'int'>]=None) -> None
	lsp_restart_client(edit:LSP.plugin.core.typing.Any) -> None
	lsp_selection_add(_:sublime.Edit, regions:LSP.plugin.core.typing.List[Tuple[<class 'int'>, <class 'int'>]]) -> None
	lsp_selection_clear(_:sublime.Edit) -> None
	lsp_symbol_declaration(edit:sublime.Edit, event:LSP.plugin.core.typing.Optional[<class 'dict'>]=None) -> None
	lsp_symbol_definition(edit:sublime.Edit, event:LSP.plugin.core.typing.Optional[<class 'dict'>]=None) -> None
	lsp_symbol_implementation(edit:sublime.Edit, event:LSP.plugin.core.typing.Optional[<class 'dict'>]=None) -> None
	lsp_symbol_references(edit:sublime.Edit, event:LSP.plugin.core.typing.Optional[<class 'dict'>]=None) -> None
	lsp_symbol_rename(edit:sublime.Edit, new_name:str, event:LSP.plugin.core.typing.Optional[<class 'dict'>]=None) -> None
	lsp_symbol_type_definition(edit:sublime.Edit, event:LSP.plugin.core.typing.Optional[<class 'dict'>]=None) -> None
	lsp_trim_completion(edit:sublime.Edit, range:LSP.plugin.core.typing.Optional[Tuple[<class 'int'>, <class 'int'>]]=None) -> None
	lsp_update_panel(edit:sublime.Edit, characters:LSP.plugin.core.typing.Optional[<class 'str'>]='') -> None
	lsp_update_server_panel(edit:sublime.Edit, prefix:str, message:str) -> None
	lsp_workspace_symbols(edit:sublime.Edit, symbol_query_input:str='') -> None
	mdlp_insert(point, string)
	open_markdown_preview()
	activate_materialize_theme(action)
	override_audit_context_create_override(**kwargs)
	override_audit_delete_override(**kwargs)
	override_audit_diff_externally(**kwargs)
	override_audit_diff_override(**kwargs)
	override_audit_diff_package(**kwargs)
	override_audit_edit_override(**kwargs)
	override_audit_freshen_override(**kwargs)
	override_audit_freshen_package(**kwargs)
	override_audit_modify_mark(package, override, mark=None)
	override_audit_refresh_report(**kwargs)
	override_audit_revert_override(**kwargs)
	override_audit_toggle_override(**kwargs)
	package_control_insert(string='')
	packagedev_align_syntax_test()
	packagedev_commit_scope_completion()
	packagedev_raw_snippet_from_snippet()
	packagedev_rearrange_yaml_syntax_def(sort=True, sort_numeric=True, sort_order=None, remove_single_line_maps=True, insert_newlines=True, save=False, _output_text=None, **kwargs)
	packagedev_snippet_from_raw_snippet()
	packagedev_suggest_syntax_test(character='^')
	insert_content(content)
	side_bar_enhancements_write_to_view(content, position, searchTerm)
	sql_beautifier()
	super_calculator()
	terminus_activate(_, **kwargs)
	terminus_click()
	terminus_close(_)
	terminus_copy()
	terminus_delete_word(forward=False)
	terminus_initialize(_, **kwargs)
	terminus_insert(point, character)
	terminus_keypress(_, **kwargs)
	terminus_maximize(_, **kwargs)
	terminus_minimize(_, **kwargs)
	terminus_nuke()
	terminus_open_context_url(event)
	terminus_open_image(event)
	terminus_paste(bracketed=False)
	terminus_paste_from_history()
	terminus_rename_title(_, title=None)
	terminus_render()
	terminus_reset(_, **kwargs)
	terminus_show_cursor(focus=True, scroll=True)
	terminus_trim_trailing_lines()
	anaconda_auto_format(edit:sublime.Edit) -> None
	anaconda_auto_import(edit:sublime.Edit) -> None
	anaconda_complete_funcargs(edit:sublime.Edit, characters:str='') -> None
	anaconda_doc(edit:sublime.Edit) -> None
	anaconda_fill_funcargs(all=False)
	anaconda_find_usages(edit:sublime.Edit) -> None
	anaconda_goto(edit:sublime.Edit) -> None
	anaconda_goto_assignment(edit:sublime.Edit) -> None
	anaconda_goto_python_object(edit:sublime.Edit) -> None
	anaconda_rename(edit:sublime.Edit) -> None
	anaconda_run_current_file_tests(edit:sublime.Edit) -> None
	anaconda_run_current_test(edit:sublime.Edit) -> None
	anaconda_run_last_test(edit:sublime.Edit) -> None
	anaconda_run_project_tests(edit:sublime.Edit) -> None
	anaconda_set_python_interpreter(edit:sublime.Edit) -> None
	anaconda_vagrant_init(edit:sublime.Edit) -> None
	anaconda_vagrant_reload(edit:sublime.Edit) -> None
	anaconda_vagrant_ssh(edit:sublime.Edit) -> None
	anaconda_vagrant_status(edit:sublime.Edit) -> None
	anaconda_vagrant_up(edit:sublime.Edit) -> None
	json_yapf_format_document()
	json_yapf_format_step1()
	json_yapf_format_step2()
	menu_file_commands()
	menu_open_from_current_dir()
	menu_toggle_preferences()
	send_code_choose_prog()
	send_code(cmd=None, prog=None, confirmation=None)
	send_repl(*args, **kargs)
	final_empty_pane_check()
	create_inputf()
	execute_cmd()
	format_json()
	format_json_step1()
	format_json_step2()
	git_commit(name)
	git_stage_self()
	git_stage_self_dir()
	swap_down_with_indent_always()
	swap_down_with_indent()
	swap_up_with_indent_always()
	swap_up_with_indent()
	safe_close()
	open_key_bindings()
	open_unity_project()
	run_jupyter()
	run_on_terminal(terminal='Command Prompt')
	smooth_new(name)
	zip_this_directory()
